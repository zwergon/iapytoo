# This workflow will install Python dependencies, 
# run tests and lint with a single version of Python
# It will also publish on release branch or if tag v* is pushed

name: Python application

on:
  push:
    branches: 
      - main
      - 'release/v*'
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: set pythonpath
      run: |
        echo "----PYTHONPATH------"
        PWD=$(pwd)
        export PYTHONPATH=$PWD:$PYTHONPATH
        echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
    - name: Test with pytest
      run: |
        pytest

  publish:
    needs: build
    if: startsWith(github.ref, 'refs/heads/release/v') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools setuptools-scm twine
      
      - name: Build the package
        run: python -m build
     
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
